var//taken from https://gist.github.com/dchest/4582374
    Salsa20 = function () {
    function t(t, s) { this.rounds = 20, this.sigmaWords = [1634760805, 857760878, 2036477234, 1797285236], this.keyWords = [], this.nonceWords = [0, 0], this.counterWords = [0, 0], this.block = [], this.blockUsed = 64, this.setKey(t), this.setNonce(s) } return t.prototype.setKey = function (t) {
        for (var s = 0, o = 0; 8 > s; s++, o += 4) this.keyWords[s] = 255 & t[o] | (255 & t[o + 1]) << 8 | (255 & t[o + 2]) << 16 | (255 & t[o + 3]) << 24
        this._reset()
    }, t.prototype.setNonce = function (t) { this.nonceWords[0] = 255 & t[0] | (255 & t[1]) << 8 | (255 & t[2]) << 16 | (255 & t[3]) << 24, this.nonceWords[1] = 255 & t[4] | (255 & t[5]) << 8 | (255 & t[6]) << 16 | (255 & t[7]) << 24, this._reset() }, t.prototype.getBytes = function (t) {
        for (var s = Array(t), o = 0; t > o; o++) 64 == this.blockUsed && (this._generateBlock(), this._incrementCounter(), this.blockUsed = 0), s[o] = this.block[this.blockUsed], this.blockUsed++
        return s
    }, t.prototype.getHexString = function (t) {
        for (var s = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"], o = [], i = this.getBytes(t), h = 0; h < i.length; h++) o.push(s[i[h] >> 4 & 15]), o.push(s[15 & i[h]])
        return o.join("")
    }, t.prototype._reset = function () { this.counterWords[0] = 0, this.counterWords[1] = 0, this.blockUsed = 64 }, t.prototype._incrementCounter = function () { this.counterWords[0] = this.counterWords[0] + 1 & 4294967295, 0 == this.counterWords[0] && (this.counterWords[1] = this.counterWords[1] + 1 & 4294967295) }, t.prototype._generateBlock = function () {
        for (var t, s = this.sigmaWords[0], o = this.keyWords[0], i = this.keyWords[1], h = this.keyWords[2], c = this.keyWords[3], k = this.sigmaWords[1], l = this.nonceWords[0], r = this.nonceWords[1], e = this.counterWords[0], b = this.counterWords[1], n = this.sigmaWords[2], d = this.keyWords[4], W = this.keyWords[5], u = this.keyWords[6], y = this.keyWords[7], a = this.sigmaWords[3], p = s, f = o, g = i, m = h, _ = c, U = k, v = l, B = r, C = e, K = b, N = n, S = d, j = W, x = u, A = y, H = a, q = 0; q < this.rounds; q += 2) t = p + j, _ ^= t << 7 | t >>> 25, t = _ + p, C ^= t << 9 | t >>> 23, t = C + _, j ^= t << 13 | t >>> 19, t = j + C, p ^= t << 18 | t >>> 14, t = U + f, K ^= t << 7 | t >>> 25, t = K + U, x ^= t << 9 | t >>> 23, t = x + K, f ^= t << 13 | t >>> 19, t = f + x, U ^= t << 18 | t >>> 14, t = N + v, A ^= t << 7 | t >>> 25, t = A + N, g ^= t << 9 | t >>> 23, t = g + A, v ^= t << 13 | t >>> 19, t = v + g, N ^= t << 18 | t >>> 14, t = H + S, m ^= t << 7 | t >>> 25, t = m + H, B ^= t << 9 | t >>> 23, t = B + m, S ^= t << 13 | t >>> 19, t = S + B, H ^= t << 18 | t >>> 14, t = p + m, f ^= t << 7 | t >>> 25, t = f + p, g ^= t << 9 | t >>> 23, t = g + f, m ^= t << 13 | t >>> 19, t = m + g, p ^= t << 18 | t >>> 14, t = U + _, v ^= t << 7 | t >>> 25, t = v + U, B ^= t << 9 | t >>> 23, t = B + v, _ ^= t << 13 | t >>> 19, t = _ + B, U ^= t << 18 | t >>> 14, t = N + K, S ^= t << 7 | t >>> 25, t = S + N, C ^= t << 9 | t >>> 23, t = C + S, K ^= t << 13 | t >>> 19, t = K + C, N ^= t << 18 | t >>> 14, t = H + A, j ^= t << 7 | t >>> 25, t = j + H, x ^= t << 9 | t >>> 23, t = x + j, A ^= t << 13 | t >>> 19, t = A + x, H ^= t << 18 | t >>> 14
        p += s, f += o, g += i, m += h, _ += c, U += k, v += l, B += r, C += e, K += b, N += n, S += d, j += W, x += u, A += y, H += a, this.block[0] = p >>> 0 & 255, this.block[1] = p >>> 8 & 255, this.block[2] = p >>> 16 & 255, this.block[3] = p >>> 24 & 255, this.block[4] = f >>> 0 & 255, this.block[5] = f >>> 8 & 255, this.block[6] = f >>> 16 & 255, this.block[7] = f >>> 24 & 255, this.block[8] = g >>> 0 & 255, this.block[9] = g >>> 8 & 255, this.block[10] = g >>> 16 & 255, this.block[11] = g >>> 24 & 255, this.block[12] = m >>> 0 & 255, this.block[13] = m >>> 8 & 255, this.block[14] = m >>> 16 & 255, this.block[15] = m >>> 24 & 255, this.block[16] = _ >>> 0 & 255, this.block[17] = _ >>> 8 & 255, this.block[18] = _ >>> 16 & 255, this.block[19] = _ >>> 24 & 255, this.block[20] = U >>> 0 & 255, this.block[21] = U >>> 8 & 255, this.block[22] = U >>> 16 & 255, this.block[23] = U >>> 24 & 255, this.block[24] = v >>> 0 & 255, this.block[25] = v >>> 8 & 255, this.block[26] = v >>> 16 & 255, this.block[27] = v >>> 24 & 255, this.block[28] = B >>> 0 & 255, this.block[29] = B >>> 8 & 255, this.block[30] = B >>> 16 & 255, this.block[31] = B >>> 24 & 255, this.block[32] = C >>> 0 & 255, this.block[33] = C >>> 8 & 255, this.block[34] = C >>> 16 & 255, this.block[35] = C >>> 24 & 255, this.block[36] = K >>> 0 & 255, this.block[37] = K >>> 8 & 255, this.block[38] = K >>> 16 & 255, this.block[39] = K >>> 24 & 255, this.block[40] = N >>> 0 & 255, this.block[41] = N >>> 8 & 255, this.block[42] = N >>> 16 & 255, this.block[43] = N >>> 24 & 255, this.block[44] = S >>> 0 & 255, this.block[45] = S >>> 8 & 255, this.block[46] = S >>> 16 & 255, this.block[47] = S >>> 24 & 255, this.block[48] = j >>> 0 & 255, this.block[49] = j >>> 8 & 255, this.block[50] = j >>> 16 & 255, this.block[51] = j >>> 24 & 255, this.block[52] = x >>> 0 & 255, this.block[53] = x >>> 8 & 255, this.block[54] = x >>> 16 & 255, this.block[55] = x >>> 24 & 255, this.block[56] = A >>> 0 & 255, this.block[57] = A >>> 8 & 255, this.block[58] = A >>> 16 & 255, this.block[59] = A >>> 24 & 255, this.block[60] = H >>> 0 & 255, this.block[61] = H >>> 8 & 255, this.block[62] = H >>> 16 & 255, this.block[63] = H >>> 24 & 255
    }, t
}()